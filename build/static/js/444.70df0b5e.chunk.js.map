{"version":3,"file":"static/js/444.70df0b5e.chunk.js","mappings":"kQAIaA,EAAU,SAACC,GACtB,OAA4BC,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAAjCC,EAAM,KAAEC,EAAS,KACxB,GAA4BF,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAAjCG,EAAM,KAAEC,EAAS,KACxB,GAAwCJ,EAAAA,EAAAA,WAAS,GAAM,eAAhDK,EAAY,KAAEC,EAAe,MAyBpCC,EAAAA,EAAAA,YAAU,WAC2B,IAA/BC,OAAOC,KAAKN,GAAQO,QAAgBL,IACtCH,EAAU,IAxBZS,EAAAA,EAAAA,QAAwB,CACtBC,QAAS,UACTC,YAAa,gCAyBjB,GAAG,CAACV,EAAQE,IAWZ,MAAO,CACLS,aAVmB,SAACC,GACpBA,EAAMC,UACNd,GAAU,SAACD,GAAM,yBACZA,GAAM,cACRc,EAAME,OAAOC,KAAOH,EAAME,OAAOE,OAAK,IAEzCf,GAAU,SAACD,GAAM,yBAAWA,GAAM,cAAGY,EAAME,OAAOC,KAAO,IAAE,GAC7D,EAIEE,aAlCmB,SAACL,GACpBA,EAAMM,iBACNjB,EAAUL,EAASE,IAGgB,IAA/BO,OAAOC,KAAKR,GAAQS,QACtBY,IAAAA,KAFU,IAGE,UACLrB,IAEJsB,MAAK,WACJjB,GAAgB,EAClB,GAEN,EAqBEL,OAAAA,EACAE,OAAAA,EAEJ,ECpDe,SAASJ,EAASE,GAC/B,IAAIE,EAAS,CAAC,EAad,OAXKF,EAAOiB,OACVf,EAAOe,KAAO,oBAEXjB,EAAOuB,MAEA,eAAeC,KAAKxB,EAAOuB,SACrCrB,EAAOqB,MAAQ,4BAFfrB,EAAOqB,MAAQ,4BAIZvB,EAAOW,UACVT,EAAOS,QAAU,uBAEZT,CACT,C,qCCfauB,GAAUC,EAAAA,EAAAA,IAAO,IAAPA,CAAW,+CAIrBC,GAAYD,EAAAA,EAAAA,IAAO,MAAPA,CAAa,oEAKzBE,GAAcF,EAAAA,EAAAA,IAAO,MAAPA,CAAa,qE,SCSxC,GAAeG,EAAAA,EAAAA,IAAf,EAXc,SAAH,GAAsC,IAAhCC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QAASC,EAAC,EAADA,EAC/B,OACE,UAACL,EAAS,YACR,wBAAKK,EAAEF,MACP,SAACF,EAAW,WACV,SAACH,EAAO,UAAEO,EAAED,SAIpB,IChBaE,GAAmBP,EAAAA,EAAAA,IAAO,MAAPA,CAAa,yHC0C7C,IDlCyBA,EAAAA,EAAAA,IAAO,OAAPA,CAAc,kKAUnBA,EAAAA,EAAAA,IAAO,OAAPA,CAAc,2IAQHA,EAAAA,EAAAA,IAAO,MAAPA,CAAa,qJCgB7BG,EAAAA,EAAAA,IAAf,EAhCgB,SAAH,GAAiD,IAA3CC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QAASG,EAAE,EAAFA,GACjC,GADsC,EAADF,EACkBnC,EACrDC,IADY,EAANE,OAAc,EAANE,OAAoB,EAAZW,aAA0B,EAAZM,aAatC,OACE,SAACc,EAAgB,CAACC,GAAIA,EAAG,UACvB,UAAC,IAAG,CAACC,QAAQ,gBAAgBC,MAAM,SAAQ,WACzC,SAAC,IAAG,CAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAG,UAClC,SAAC,KAAK,CAACC,UAAU,OAAM,UACrB,SAAC,EAAK,CAACX,MAAOA,EAAOC,QAASA,SAGlC,SAAC,IAAG,CAACM,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAG,UAClC,SAAC,KAAK,CAACC,UAAU,QAAO,UACtB,SAAC,EAAK,CAACX,MAAOA,EAAOC,QAASA,YAM1C,I","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n    // Your url for API\r\n    const url = \"\";\r\n    if (Object.keys(values).length === 3) {\r\n      axios\r\n        .post(url, {\r\n          ...values,\r\n        })\r\n        .then(() => {\r\n          setShouldSubmit(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(\"\");\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(\r\n    validate\r\n  ) as any;\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom direction=\"left\">\r\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\">\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"right\">\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["useForm","validate","useState","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","message","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","axios","then","email","test","Content","styled","Container","TextWrapper","withTranslation","title","content","t","ContactContainer","id","justify","align","lg","md","sm","xs","direction"],"sourceRoot":""}